> 正在思考
**检测路径错误**
头(nameError)未找到，这让我思考有无路径问题。安装libnftnl-dev, libmnl-dev, libnl-3-dev, libnl-genl-3-dev后，检查正确性。
**调整编译路径**  
检查头文件位置，更新代码或编译命令，确保包含正确路径。使用pkg-config获取libnftnl对应标志。
**调整包含路径**
在代码中更新包括路径，或通过pkg-config管理环境，可能是处理这个头文件问题的关键。
思考，持续 5 秒

<think process>
编译错误信息 `fatal error: nftnl/table.h: No such file or directory` 表明编译器无法找到 `nftnl/table.h` 头文件。尽管已经安装了 `libnftnl-dev`、`libmnl-dev`、`libnl-3-dev` 和 `libnl-genl-3-dev`，这些头文件通常位于 `/usr/include/libnftnl/` 目录下。因此，需要调整代码中的头文件包含路径，以指向正确的位置。此外，编译时还需要确保编译器知道新的包含路径，并正确链接所有必要的库。

具体步骤如下：

1. **修改头文件包含路径**：将包含路径从 `<nftnl/table.h>` 修改为 `<libnftnl/table.h>`，以反映实际的文件结构。
2. **调整编译命令**：在编译命令中添加 `-I/usr/include/libnftnl` 以确保编译器能够找到新的包含路径。
3. **确认链接库**：确保编译命令中包含所有必要的库，如 `libnftnl`、`libmnl`、`libnl-3` 和 `libnl-genl-3`。

通过以上修改，编译器将能够正确找到所需的头文件，并成功编译用户态程序。

</think process>
<pkg install cmd>
</pkg install cmd>
<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netlink/netlink.h>
#include <netlink/msg.h>
#include <netlink/genl/genl.h>
#include <libnftnl/table.h>
#include <libnftnl/chain.h>
#include <libnftnl/rule.h>

int main() {
    struct nl_sock *sock;
    int family;
    int ret;

    // 初始化Netlink套接字
    sock = nl_socket_alloc();
    if (!sock) {
        fprintf(stderr, "Failed to allocate netlink socket.\n");
        return -1;
    }

    if (genl_connect(sock)) {
        fprintf(stderr, "Failed to connect to generic netlink.\n");
        nl_socket_free(sock);
        return -1;
    }

    family = genl_ctrl_resolve(sock, "nftables");
    if (family < 0) {
        fprintf(stderr, "Failed to resolve nftables family.\n");
        nl_socket_free(sock);
        return -1;
    }

    // 创建一个新的表
    struct nftnl_table *table;
    char *table_name = "test_table";
    table = nftnl_table_alloc();
    if (!table) {
        fprintf(stderr, "Failed to allocate nftnl_table.\n");
        nl_socket_free(sock);
        return -1;
    }
    nftnl_table_set_str(table, NFTNL_TABLE_NAME, table_name);
    nftnl_table_set_u32(table, NFTNL_TABLE_FAMILY, NFPROTO_IPV4);

    struct nl_msg *msg = nlmsg_alloc();
    if (!msg) {
        fprintf(stderr, "Failed to allocate netlink message.\n");
        nftnl_table_free(table);
        nl_socket_free(sock);
        return -1;
    }

    nftnl_table_nlmsg_build_hdr(msg, family, NFT_MSG_NEWTABLE, NLM_F_CREATE | NLM_F_EXCL | NLM_F_ACK);
    nftnl_table_nlmsg_build_payload(msg, table);
    ret = nl_send_auto(sock, msg);
    if (ret < 0) {
        fprintf(stderr, "Failed to send table creation message: %s\n", nl_geterror(ret));
        nlmsg_free(msg);
        nftnl_table_free(table);
        nl_socket_free(sock);
        return -1;
    }
    nlmsg_free(msg);
    nftnl_table_free(table);

    // 创建一个新的链
    struct nftnl_chain *chain;
    char *chain_name = "test_chain";
    chain = nftnl_chain_alloc();
    if (!chain) {
        fprintf(stderr, "Failed to allocate nftnl_chain.\n");
        nl_socket_free(sock);
        return -1;
    }
    nftnl_chain_set_str(chain, NFTNL_CHAIN_TABLE, table_name);
    nftnl_chain_set_str(chain, NFTNL_CHAIN_NAME, chain_name);
    nftnl_chain_set_u32(chain, NFTNL_CHAIN_HOOKNUM, NF_INET_PRE_ROUTING);
    nftnl_chain_set_u32(chain, NFTNL_CHAIN_POLICY, NFT_DROP);

    msg = nlmsg_alloc();
    if (!msg) {
        fprintf(stderr, "Failed to allocate netlink message.\n");
        nftnl_chain_free(chain);
        nl_socket_free(sock);
        return -1;
    }

    nftnl_chain_nlmsg_build_hdr(msg, family, NFT_MSG_NEWCHAIN, NLM_F_CREATE | NLM_F_EXCL | NLM_F_ACK);
    nftnl_chain_nlmsg_build_payload(msg, chain);
    ret = nl_send_auto(sock, msg);
    if (ret < 0) {
        fprintf(stderr, "Failed to send chain creation message: %s\n", nl_geterror(ret));
        nlmsg_free(msg);
        nftnl_chain_free(chain);
        nl_socket_free(sock);
        return -1;
    }
    nlmsg_free(msg);
    nftnl_chain_free(chain);

    printf("Successfully created table '%s' and chain '%s'.\n", table_name, chain_name);

    nl_socket_free(sock);
    return 0;
}
</code>
<code name>test_case_netfilter.c</code name>
<compile cmd>
gcc test_case_netfilter.c -I/usr/include/libnl3 -I/usr/include/libnftnl -lnftnl -lmnl -lnl-3 -lnl-genl-3 -o test_case_netfilter
</compile cmd>