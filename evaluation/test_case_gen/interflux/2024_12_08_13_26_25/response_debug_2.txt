> 正在思考
**检查错误消息**
正在查看`/bin/sh: 1: iproute2: not found`错误消息，这表示代码企图运行`iproute2`作为命令，但实际上错误地使用了`ip`和`tc`。
**纠正代码依赖**
代码使用`ip`和`tc`，但错误信息提到了`iproute2`。可能是之前的修复不正确，或用户在重用初始代码。
**调整依赖**
我正在查找解决这个问题的方法，可能是代码中`iproute2`依赖的不匹配导致的错误信息。使用`ip`和`tc`可能更为合适。
**解决权限问题**
代码运行`ip`和`tc`命令可能需要管理员权限，或者它们不在环境路径中。确保使用正确命令，并且代码编译时去掉不必要的库引用。
**调整代码**
代码使用`ip`和`tc`命令，确保编译命令准确，必要时加入错误检查。这样可以更好地兼容不同的操作系统环境。
**适应代码需求**
根据提示，代码应使用`ip`和`tc`，不包含`iproute2`，并且编译命令应为`gcc test_case_qdisc_alloc.c -o test_case_qdisc_alloc`。
思考，持续 10 秒

<think process>
报错信息显示 `/bin/sh: 1: iproute2: not found`，这表明程序试图执行一个名为 `iproute2` 的命令，但实际上 `iproute2` 是一个包含多个工具（如 `ip` 和 `tc`）的包，而不是一个单独的可执行命令。

检查原始代码，确保 `system()` 调用中使用的是正确的命令 `ip` 和 `tc`，而不是 `iproute2`。此外，之前的编译命令中包含了 `-lpcap`，但代码中并未使用 `pcap` 库，因此应移除该链接选项。

修正后的代码应正确使用 `ip` 和 `tc` 命令，并且编译时不需要链接 `pcap` 库。此外，执行这些网络配置命令通常需要超级用户权限，因此在运行编译后的程序时应确保具有适当的权限。

</think process>
<pkg install cmd>
</pkg install cmd>
<code>
#include <stdio.h>
#include <stdlib.h>

int main() {
    // 创建一个虚拟网桥接口
    if (system("ip link add name veth0 type veth peer name veth1") != 0) {
        perror("Failed to create veth pair");
        return 1;
    }

    // 激活接口
    if (system("ip link set dev veth0 up") != 0) {
        perror("Failed to set veth0 up");
        return 1;
    }
    if (system("ip link set dev veth1 up") != 0) {
        perror("Failed to set veth1 up");
        return 1;
    }

    // 使用 tc 创建并配置默认的队列调度器
    if (system("tc qdisc add dev veth0 root handle 1: htb default 12") != 0) {
        perror("Failed to add qdisc to veth0");
        return 1;
    }

    // 配置一个简单的队列调度器
    if (system("tc class add dev veth0 parent 1: classid 1:1 htb rate 10mbit") != 0) {
        perror("Failed to add class to veth0");
        return 1;
    }

    // 验证队列调度器是否已被配置
    if (system("tc -s qdisc show dev veth0") != 0) {
        perror("Failed to show qdisc on veth0");
        return 1;
    }

    return 0;
}
</code>
<code name>test_case_qdisc_alloc.c</code name>
<compile cmd>
gcc test_case_qdisc_alloc.c -o test_case_qdisc_alloc
</compile cmd>